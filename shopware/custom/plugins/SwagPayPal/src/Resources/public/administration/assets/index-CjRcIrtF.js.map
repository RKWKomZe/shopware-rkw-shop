{"version":3,"file":"index-CjRcIrtF.js","sources":["../../../app/administration/src/module/swag-paypal-settings/components/swag-paypal-settings-sales-channel-switch/swag-paypal-settings-sales-channel-switch.html.twig","../../../app/administration/src/module/swag-paypal-settings/components/swag-paypal-settings-sales-channel-switch/index.ts"],"sourcesContent":["<mt-card\n    class=\"swag-paypal-settings-sales-channel-switch\"\n    position-identifier=\"swag-paypal-settings-sales-channel-switch\"\n    :title=\"$t('global.entities.sales_channel', 2)\"\n>\n    <template #headerRight>\n        <div class=\"swag-paypal-settings-sales-channel-switch__header-right\">\n            <mt-link type=\"internal\" :to=\"{ name: 'sw.settings.payment.overview' }\">\n                {{ $t('sw-settings-payment.general.mainMenuItemGeneral') }}\n            </mt-link>\n        </div>\n    </template>\n\n    <sw-single-select\n        v-model:value=\"settingsStore.salesChannel\"\n        :is-loading=\"isLoading || settingsStore.isLoading\"\n        :options=\"salesChannels\"\n        :disabled=\"!acl.can('swag_paypal.editor') || isLoading || settingsStore.isLoading\"\n    />\n\n    <div class=\"swag-paypal-settings-sales-channel-switch__default\">\n        <p>{{ $t('swag-paypal-settings-sales-channel-switch.description') }}</p>\n\n        <sw-button-process\n            :process-success=\"defaultPaymentMethods === 'success'\"\n            :is-loading=\"defaultPaymentMethods === 'loading'\"\n            :disabled=\"!acl.can('swag_paypal.editor') || isLoading\"\n            @update:process-success=\"defaultPaymentMethods === 'none'\"\n            @click=\"onSetPaymentMethodDefault\"\n        >\n            {{ $t('swag-paypal-settings-sales-channel-switch.label') }}\n        </sw-button-process>\n    </div>\n</mt-card>\n","import template from './swag-paypal-settings-sales-channel-switch.html.twig';\nimport './swag-paypal-settings-sales-channel-switch.scss';\n\nconst { Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\n\ntype SalesChannel = {\n    value: string | null;\n    label: string;\n};\n\n/**\n * @private\n */\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'SwagPaypalPaymentMethodService',\n    ],\n\n    data(): {\n        isLoading: boolean;\n        salesChannels: SalesChannel[];\n        defaultPaymentMethods: 'none' | 'loading' | 'success';\n    } {\n        return {\n            isLoading: true,\n            salesChannels: [],\n            defaultPaymentMethods: 'none',\n        };\n    },\n\n    computed: {\n        settingsStore() {\n            return Shopware.Store.get('swagPayPalSettings');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        salesChannelCriteria(): TCriteria {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addFilter(Criteria.equalsAny('typeId', [\n                Defaults.storefrontSalesChannelTypeId,\n                Defaults.apiSalesChannelTypeId,\n            ]));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.fetchSalesChannels();\n        },\n\n        async fetchSalesChannels() {\n            try {\n                const salesChannels = await this.salesChannelRepository.search(this.salesChannelCriteria, Shopware.Context.api);\n\n                this.salesChannels = [{\n                    value: null,\n                    label: this.$t('sw-sales-channel-switch.labelDefaultOption'),\n                }];\n\n                salesChannels.forEach((salesChannel) => {\n                    this.salesChannels.push({\n                        value: salesChannel.id,\n                        label: salesChannel.translated?.name || salesChannel.name,\n                    });\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onSetPaymentMethodDefault() {\n            this.defaultPaymentMethods = 'loading';\n\n            this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(this.settingsStore.salesChannel)\n                .then(() => { this.defaultPaymentMethods = 'success'; })\n                .catch(() => { this.defaultPaymentMethods = 'none'; });\n        },\n    },\n});\n"],"names":["template","Defaults","Criteria","index","criteria","salesChannels","salesChannel","_a"],"mappings":"AAAA,MAAAA,EAAe,gpCCGT,CAAE,SAAAC,GAAa,SACf,CAAE,SAAAC,CAAA,EAAa,SAAS,KAU9BC,EAAe,SAAS,UAAU,oBAAoB,CAClD,SAAAH,EAEA,OAAQ,CACJ,MACA,oBACA,gCAAA,EAGJ,MAIE,CACE,MAAO,CACH,UAAW,GACX,cAAe,CAAA,EACf,sBAAuB,MAAA,CAC3B,EAGJ,SAAU,CACN,eAAgB,CACZ,OAAO,SAAS,MAAM,IAAI,oBAAoB,CAAA,EAGlD,wBAAyB,CACrB,OAAO,KAAK,kBAAkB,OAAO,eAAe,CAAA,EAGxD,sBAAkC,CAC9B,MAAMI,EAAW,IAAIF,EAAS,EAAG,GAAG,EAEpC,OAAAE,EAAS,UAAUF,EAAS,UAAU,SAAU,CAC5CD,EAAS,6BACTA,EAAS,qBAAA,CACZ,CAAC,EAEKG,CAAA,CACX,EAGJ,SAAU,CACN,KAAK,iBAAA,CAAiB,EAG1B,QAAS,CACL,kBAAmB,CACf,KAAK,mBAAA,CAAmB,EAG5B,MAAM,oBAAqB,CACvB,GAAI,CACA,MAAMC,EAAgB,MAAM,KAAK,uBAAuB,OAAO,KAAK,qBAAsB,SAAS,QAAQ,GAAG,EAE9G,KAAK,cAAgB,CAAC,CAClB,MAAO,KACP,MAAO,KAAK,GAAG,4CAA4C,CAAA,CAC9D,EAEDA,EAAc,QAASC,GAAiB,CD1ExD,IAAAC,EC2EoB,KAAK,cAAc,KAAK,CACpB,MAAOD,EAAa,GACpB,QAAOC,EAAAD,EAAa,aAAb,YAAAC,EAAyB,OAAQD,EAAa,IAAA,CACxD,CAAA,CACJ,CAAA,QACL,CACI,KAAK,UAAY,EAAA,CACrB,EAGJ,2BAA4B,CACxB,KAAK,sBAAwB,UAE7B,KAAK,+BAA+B,iCAAiC,KAAK,cAAc,YAAY,EAC/F,KAAK,IAAM,CAAE,KAAK,sBAAwB,SAAA,CAAY,EACtD,MAAM,IAAM,CAAE,KAAK,sBAAwB,MAAA,CAAS,CAAA,CAC7D,CAER,CAAC"}