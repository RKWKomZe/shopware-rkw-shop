{"version":3,"file":"index-FwxGWv-e.js","sources":["../../../app/administration/src/app/component/swag-paypal-setting/swag-paypal-setting.html.twig","../../../app/administration/src/types/system-config.ts","../../../app/administration/src/constant/swag-paypal-settings.constant.ts","../../../app/administration/src/app/component/swag-paypal-setting/index.ts"],"sourcesContent":["<sw-inherit-wrapper\n    v-bind=\"wrapperAttrs\"\n    class=\"swag-paypal-setting\"\n    :class=\"wrapperClasses\"\n    :value=\"value\"\n    :inherited-value=\"inheritedValue\"\n    :custom-inheritation-check-function=\"customInheritationCheckFunction\"\n    :has-parent=\"hasParent\"\n    @update:value=\"setValue\"\n>\n    <template #content=\"props\">\n        <slot\n            name=\"content\"\n            v-bind=\"{\n                ...props,\n                disabled: props.isInherited || disabled,\n                path: path,\n            }\"\n        >\n            <mt-switch\n                v-if=\"type === 'boolean'\"\n                v-bind=\"formAttrs\"\n                :name=\"path\"\n                :disabled=\"props.isInherited || disabled\"\n                :model-value=\"props.currentValue\"\n                @update:model-value=\"props.updateCurrentValue\"\n            />\n\n            <sw-single-select\n                v-else-if=\"type === 'string' && formAttrs.hasOwnProperty('options')\"\n                v-bind=\"formAttrs\"\n                :name=\"path\"\n                :disabled=\"props.isInherited || disabled\"\n                :value=\"props.currentValue ?? null\"\n                @update:value=\"props.updateCurrentValue\"\n            >\n                <template v-if=\"attrs.hasOwnProperty('hintText')\" #hint>\n                    {{ attrs.hintText }}\n                </template>\n            </sw-single-select>\n\n            <mt-password-field\n                v-else-if=\"type === 'password'\"\n                v-bind=\"formAttrs\"\n                :name=\"path\"\n                :disabled=\"props.isInherited || disabled\"\n                :model-value=\"props.currentValue\"\n                @update:model-value=\"props.updateCurrentValue\"\n            >\n                <template v-if=\"attrs.hasOwnProperty('hintText')\" #hint>\n                    {{ attrs.hintText }}\n                </template>\n            </mt-password-field>\n\n            <mt-text-field\n                v-else-if=\"type === 'string'\"\n                v-bind=\"formAttrs\"\n                :name=\"path\"\n                :disabled=\"props.isInherited || disabled\"\n                :model-value=\"props.currentValue\"\n                @update:model-value=\"props.updateCurrentValue\"\n            >\n                <template v-if=\"attrs.hasOwnProperty('hintText')\" #hint>\n                    {{ attrs.hintText }}\n                </template>\n            </mt-text-field>\n        </slot>\n    </template>\n</sw-inherit-wrapper>\n","import type { SYSTEM_CONFIG, LANDING_PAGES, BUTTON_COLORS, BUTTON_SHAPES, INTENTS, COUNTRY_OVERRIDES } from 'SwagPayPal/constant/swag-paypal-settings.constant';\n\n// @todo - Keys should be from SYSTEM_CONFIG\nexport declare type SystemConfig = {\n    'SwagPayPal.settings.clientId'?: string;\n    'SwagPayPal.settings.clientSecret'?: string;\n    'SwagPayPal.settings.clientIdSandbox'?: string;\n    'SwagPayPal.settings.clientSecretSandbox'?: string;\n    'SwagPayPal.settings.merchantPayerId'?: string;\n    'SwagPayPal.settings.merchantPayerIdSandbox'?: string;\n    'SwagPayPal.settings.sandbox'?: boolean;\n    'SwagPayPal.settings.intent'?: typeof INTENTS[number];\n    'SwagPayPal.settings.submitCart'?: boolean;\n    'SwagPayPal.settings.webhookId'?: string;\n    'SwagPayPal.settings.webhookExecuteToken'?: string;\n    'SwagPayPal.settings.brandName'?: string;\n    'SwagPayPal.settings.landingPage'?: typeof LANDING_PAGES[number];\n    'SwagPayPal.settings.sendOrderNumber'?: boolean;\n    'SwagPayPal.settings.orderNumberPrefix'?: string;\n    'SwagPayPal.settings.orderNumberSuffix'?: string;\n    'SwagPayPal.settings.ecsDetailEnabled'?: boolean;\n    'SwagPayPal.settings.ecsCartEnabled'?: boolean;\n    'SwagPayPal.settings.ecsOffCanvasEnabled'?: boolean;\n    'SwagPayPal.settings.ecsLoginEnabled'?: boolean;\n    'SwagPayPal.settings.ecsListingEnabled'?: boolean;\n    'SwagPayPal.settings.ecsButtonColor'?: typeof BUTTON_COLORS[number];\n    'SwagPayPal.settings.ecsButtonShape'?: typeof BUTTON_SHAPES[number];\n    'SwagPayPal.settings.ecsButtonLanguageIso'?: string | null;\n\n    'SwagPayPal.settings.ecsShowPayLater'?: boolean;\n    'SwagPayPal.settings.spbButtonColor'?: typeof BUTTON_COLORS[number];\n    'SwagPayPal.settings.spbButtonShape'?: typeof BUTTON_SHAPES[number];\n    'SwagPayPal.settings.spbButtonLanguageIso'?: string | null;\n    'SwagPayPal.settings.acdcForce3DS'?: boolean;\n    'SwagPayPal.settings.puiCustomerServiceInstructions'?: string;\n    'SwagPayPal.settings.installmentBannerDetailPageEnabled'?: boolean;\n    'SwagPayPal.settings.installmentBannerCartEnabled'?: boolean;\n    'SwagPayPal.settings.installmentBannerOffCanvasCartEnabled'?: boolean;\n    'SwagPayPal.settings.installmentBannerLoginPageEnabled'?: boolean;\n    'SwagPayPal.settings.installmentBannerFooterEnabled'?: boolean;\n    'SwagPayPal.settings.excludedProductIds'?: string[];\n    'SwagPayPal.settings.excludedProductStreamIds'?: string[];\n    'SwagPayPal.settings.spbShowPayLater'?: boolean;\n    'SwagPayPal.settings.spbCheckoutEnabled'?: boolean;\n    'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled'?: boolean;\n    'SwagPayPal.settings.vaultingEnabled'?: boolean;\n    'SwagPayPal.settings.vaultingEnableAlways'?: boolean;\n    'SwagPayPal.settings.vaultingEnabledWallet'?: boolean;\n    'SwagPayPal.settings.vaultingEnabledACDC'?: boolean;\n    'SwagPayPal.settings.vaultingEnabledVenmo'?: boolean;\n\n    'SwagPayPal.settings.crossBorderMessagingEnabled'?: boolean;\n    'SwagPayPal.settings.crossBorderBuyerCountry'?: typeof COUNTRY_OVERRIDES[number] | null;\n};\n\n/**\n * @private\n */\nexport const SystemConfigDefinition: Record<SYSTEM_CONFIG, 'string' | 'password' | 'boolean' | 'array'> = {\n    'SwagPayPal.settings.clientId': 'string',\n    'SwagPayPal.settings.clientSecret': 'password',\n    'SwagPayPal.settings.clientIdSandbox': 'string',\n    'SwagPayPal.settings.clientSecretSandbox': 'password',\n    'SwagPayPal.settings.merchantPayerId': 'string',\n    'SwagPayPal.settings.merchantPayerIdSandbox': 'string',\n    'SwagPayPal.settings.sandbox': 'boolean',\n    'SwagPayPal.settings.intent': 'string',\n    'SwagPayPal.settings.submitCart': 'boolean',\n    'SwagPayPal.settings.webhookId': 'string',\n    'SwagPayPal.settings.webhookExecuteToken': 'string',\n    'SwagPayPal.settings.brandName': 'string',\n    'SwagPayPal.settings.landingPage': 'string',\n    'SwagPayPal.settings.sendOrderNumber': 'boolean',\n    'SwagPayPal.settings.orderNumberPrefix': 'string',\n    'SwagPayPal.settings.orderNumberSuffix': 'string',\n    'SwagPayPal.settings.ecsDetailEnabled': 'boolean',\n    'SwagPayPal.settings.ecsCartEnabled': 'boolean',\n    'SwagPayPal.settings.ecsOffCanvasEnabled': 'boolean',\n    'SwagPayPal.settings.ecsLoginEnabled': 'boolean',\n    'SwagPayPal.settings.ecsListingEnabled': 'boolean',\n    'SwagPayPal.settings.ecsButtonColor': 'string',\n    'SwagPayPal.settings.ecsButtonShape': 'string',\n    'SwagPayPal.settings.ecsButtonLanguageIso': 'string',\n\n    'SwagPayPal.settings.ecsShowPayLater': 'boolean',\n    'SwagPayPal.settings.spbButtonColor': 'string',\n    'SwagPayPal.settings.spbButtonShape': 'string',\n    'SwagPayPal.settings.spbButtonLanguageIso': 'string',\n    'SwagPayPal.settings.acdcForce3DS': 'boolean',\n    'SwagPayPal.settings.puiCustomerServiceInstructions': 'string',\n    'SwagPayPal.settings.installmentBannerDetailPageEnabled': 'boolean',\n    'SwagPayPal.settings.installmentBannerCartEnabled': 'boolean',\n    'SwagPayPal.settings.installmentBannerOffCanvasCartEnabled': 'boolean',\n    'SwagPayPal.settings.installmentBannerLoginPageEnabled': 'boolean',\n    'SwagPayPal.settings.installmentBannerFooterEnabled': 'boolean',\n    'SwagPayPal.settings.excludedProductIds': 'array',\n    'SwagPayPal.settings.excludedProductStreamIds': 'array',\n    'SwagPayPal.settings.spbShowPayLater': 'boolean',\n    'SwagPayPal.settings.spbCheckoutEnabled': 'boolean',\n    'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled': 'boolean',\n    'SwagPayPal.settings.vaultingEnabled': 'boolean',\n    'SwagPayPal.settings.vaultingEnableAlways': 'boolean',\n    'SwagPayPal.settings.vaultingEnabledWallet': 'boolean',\n    'SwagPayPal.settings.vaultingEnabledACDC': 'boolean',\n    'SwagPayPal.settings.vaultingEnabledVenmo': 'boolean',\n\n    'SwagPayPal.settings.crossBorderMessagingEnabled': 'boolean',\n    'SwagPayPal.settings.crossBorderBuyerCountry': 'string',\n};\n","export const LOCALES = [\n    'ar_EG',\n    'cs_CZ',\n    'da_DK',\n    'de_DE',\n    'el_GR',\n    'en_AU',\n    'en_GB',\n    'en_IN',\n    'en_US',\n    'es_ES',\n    'es_XC',\n    'fi_FI',\n    'fr_CA',\n    'fr_FR',\n    'fr_XC',\n    'he_IL',\n    'hu_HU',\n    'id_ID',\n    'it_IT',\n    'ja_JP',\n    'ko_KR',\n    'nl_NL',\n    'no_NO',\n    'pl_PL',\n    'pt_BR',\n    'pt_PT',\n    'ru_RU',\n    'sk_SK',\n    'sv_SE',\n    'th_TH',\n    'zh_CN',\n    'zh_HK',\n    'zh_TW',\n    'zh_XC',\n] as const;\n\nexport type LOCALE = typeof LOCALES[number];\n\nexport const COUNTRY_OVERRIDES = [\n    'en-AU',\n    'de-DE',\n    'es-ES',\n    'fr-FR',\n    'en-GB',\n    'it-IT',\n    'en-US',\n] as const;\n\nexport type COUNTRY_OVERRIDE = typeof COUNTRY_OVERRIDES[number];\n\nexport const INTENTS = [\n    'CAPTURE',\n    'AUTHORIZE',\n] as const;\n\nexport type INTENT = typeof INTENTS[number];\n\nexport const LANDING_PAGES = [\n    'LOGIN',\n    'GUEST_CHECKOUT',\n    'NO_PREFERENCE',\n] as const;\n\nexport type LANDING_PAGE = typeof LANDING_PAGES[number];\n\nexport const BUTTON_COLORS = [\n    'blue',\n    'black',\n    'gold',\n    'silver',\n    'white',\n] as const;\n\nexport type BUTTON_COLOR = typeof BUTTON_COLORS[number];\n\nexport const BUTTON_SHAPES = [\n    'sharp',\n    'pill',\n    'rect',\n] as const;\n\nexport type BUTTON_SHAPE = typeof BUTTON_SHAPES[number];\n\nexport const SYSTEM_CONFIGS = [\n    'SwagPayPal.settings.clientId',\n    'SwagPayPal.settings.clientSecret',\n    'SwagPayPal.settings.clientIdSandbox',\n    'SwagPayPal.settings.clientSecretSandbox',\n    'SwagPayPal.settings.merchantPayerId',\n    'SwagPayPal.settings.merchantPayerIdSandbox',\n    'SwagPayPal.settings.sandbox',\n\n    'SwagPayPal.settings.intent',\n    'SwagPayPal.settings.submitCart',\n    'SwagPayPal.settings.brandName',\n    'SwagPayPal.settings.landingPage',\n    'SwagPayPal.settings.sendOrderNumber',\n    'SwagPayPal.settings.orderNumberPrefix',\n    'SwagPayPal.settings.orderNumberSuffix',\n    'SwagPayPal.settings.excludedProductIds',\n    'SwagPayPal.settings.excludedProductStreamIds',\n\n    'SwagPayPal.settings.ecsDetailEnabled',\n    'SwagPayPal.settings.ecsCartEnabled',\n    'SwagPayPal.settings.ecsOffCanvasEnabled',\n    'SwagPayPal.settings.ecsLoginEnabled',\n    'SwagPayPal.settings.ecsListingEnabled',\n    'SwagPayPal.settings.ecsButtonColor',\n    'SwagPayPal.settings.ecsButtonShape',\n    'SwagPayPal.settings.ecsButtonLanguageIso',\n    'SwagPayPal.settings.ecsShowPayLater',\n\n    'SwagPayPal.settings.spbButtonColor',\n    'SwagPayPal.settings.spbButtonShape',\n    'SwagPayPal.settings.spbButtonLanguageIso',\n    'SwagPayPal.settings.spbShowPayLater',\n    'SwagPayPal.settings.spbCheckoutEnabled',\n    'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled',\n\n    'SwagPayPal.settings.acdcForce3DS',\n\n    'SwagPayPal.settings.puiCustomerServiceInstructions',\n\n    'SwagPayPal.settings.installmentBannerDetailPageEnabled',\n    'SwagPayPal.settings.installmentBannerCartEnabled',\n    'SwagPayPal.settings.installmentBannerOffCanvasCartEnabled',\n    'SwagPayPal.settings.installmentBannerLoginPageEnabled',\n    'SwagPayPal.settings.installmentBannerFooterEnabled',\n\n    'SwagPayPal.settings.vaultingEnabled',\n    'SwagPayPal.settings.vaultingEnableAlways',\n    'SwagPayPal.settings.vaultingEnabledWallet',\n    'SwagPayPal.settings.vaultingEnabledACDC',\n    'SwagPayPal.settings.vaultingEnabledVenmo',\n\n    'SwagPayPal.settings.crossBorderMessagingEnabled',\n    'SwagPayPal.settings.crossBorderBuyerCountry',\n\n    'SwagPayPal.settings.webhookId',\n    'SwagPayPal.settings.webhookExecuteToken',\n] as const;\n\nexport type SYSTEM_CONFIG = typeof SYSTEM_CONFIGS[number];\n","import type * as PayPal from 'SwagPayPal/types';\nimport template from './swag-paypal-setting.html.twig';\nimport './swag-paypal-setting.scss';\nimport { SystemConfigDefinition } from '../../../types/system-config';\nimport { type SYSTEM_CONFIG, SYSTEM_CONFIGS } from '../../../constant/swag-paypal-settings.constant';\n\nconst { string, object } = Shopware.Utils;\n\n/**\n * @private - The component has a stable public API (props), but expect that implementation details may change.\n */\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: ['acl'],\n\n    emits: ['update:value'],\n\n    props: {\n        path: {\n            required: true,\n            type: String as PropType<SYSTEM_CONFIG>,\n            validation: (value: SYSTEM_CONFIG) => {\n                return SYSTEM_CONFIGS.includes(value);\n            },\n        },\n    },\n\n    computed: {\n        settingsStore() {\n            return Shopware.Store.get('swagPayPalSettings');\n        },\n\n        value() {\n            return this.settingsStore.getActual(this.path);\n        },\n\n        inheritedValue() {\n            return this.settingsStore.salesChannel\n                ? this.settingsStore.getRoot(this.path)\n                : undefined;\n        },\n\n        hasParent() {\n            return !!this.settingsStore.salesChannel;\n        },\n\n        pathDomainless() {\n            return this.path.replace('SwagPayPal.settings.', '');\n        },\n\n        disabled(): boolean {\n            return !this.acl.can('swag_paypal.editor')\n                || this.settingsStore.isLoading\n                || !!this.formAttrs.disabled;\n        },\n\n        type() {\n            return SystemConfigDefinition[this.path];\n        },\n\n        customInheritationCheckFunction() {\n            return (value: unknown) => value === null || value === undefined;\n        },\n\n        label() {\n            return this.tif(`swag-paypal-setting.label.${this.pathDomainless}`);\n        },\n\n        helpText() {\n            return this.tif(\n                `swag-paypal-setting.helpText.${this.pathDomainless}.${this.settingsStore.getActual(this.path)}`,\n                `swag-paypal-setting.helpText.${this.pathDomainless}`,\n            );\n        },\n\n        hintText() {\n            return this.tif(\n                `swag-paypal-setting.hintText.${this.pathDomainless}.${this.settingsStore.getActual(this.path)}`,\n                `swag-paypal-setting.hintText.${this.pathDomainless}`,\n            );\n        },\n\n        attrs() {\n            // normalize attribute keys to camelCase\n            const entries = Object.entries(this.$attrs).map(([key, value]) => [string.camelCase(key), value]);\n            const attrs = Object.fromEntries(entries) as Record<string, unknown>;\n\n            if (!attrs.hasOwnProperty('label') && this.label) {\n                attrs.label = this.label;\n            }\n\n            if (!attrs.hasOwnProperty('helpText') && this.helpText) {\n                attrs.helpText = this.helpText;\n            }\n\n            if (!attrs.hasOwnProperty('hintText') && this.hintText) {\n                attrs.hintText = this.hintText;\n            }\n\n            return attrs;\n        },\n\n        wrapperAttrs(): Record<string, unknown> {\n            return object.pick(this.attrs, [\n                'disabled',\n                'helpText',\n                'label',\n                'required',\n            ]);\n        },\n\n        formAttrs(): Record<string, unknown> {\n            return object.pick(this.attrs, [\n                'disabled',\n                'error',\n                'labelProperty',\n                'options',\n                'valueProperty',\n            ]);\n        },\n\n        wrapperClasses(): Record<string, boolean> {\n            return {\n                'is--bordered': this.type === 'boolean' && (this.attrs.bordered ?? true),\n                [`is--${this.type}`]: true,\n            };\n        },\n    },\n\n    methods: {\n        /**\n         * Translate if found, otherwise return null\n         */\n        tif(...keys: string[]): string | null {\n            // $te will also report partial matches as found\n            const key = keys.find((k) => this.$te(k) && this.$t(k) !== k);\n\n            return key ? this.$t(key) : null;\n        },\n\n        setValue(value: PayPal.SystemConfig[keyof PayPal.SystemConfig]) {\n            if (value !== this.value) {\n                this.settingsStore.set(this.path, value);\n                this.$emit('update:value', value);\n            }\n        },\n    },\n});\n"],"names":["template","SystemConfigDefinition","SYSTEM_CONFIGS","string","object","index","value","entries","key","attrs","keys","k"],"mappings":"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"}