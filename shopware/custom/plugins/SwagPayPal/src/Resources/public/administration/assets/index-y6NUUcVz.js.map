{"version":3,"file":"index-y6NUUcVz.js","sources":["../../../app/administration/src/module/swag-paypal-settings/view/swag-paypal-settings-general/swag-paypal-settings-general.html.twig","../../../app/administration/src/module/swag-paypal-settings/view/swag-paypal-settings-general/index.ts"],"sourcesContent":["{% block swag_paypal_settings_live_credentials %}\n<mt-card\n    class=\"swag-paypal-settings-live-credentials\"\n    position-identifier=\"swag-paypal-settings-live-credentials\"\n    :is-loading=\"settingsStore.isLoading\"\n>\n    <template #title>\n        <swag-paypal-setting\n            class=\"swag-paypal-settings-credentials__title\"\n            path=\"SwagPayPal.settings.sandbox\"\n            :bordered=\"false\"\n            :label=\"$t('swag-paypal-settings.credentialsLive.title')\"\n            :help-text=\"null\"\n        >\n            <template #content=\"props\">\n                <mt-switch\n                    :name=\"props.path\"\n                    :disabled=\"props.disabled\"\n                    :model-value=\"!props.currentValue\"\n                    @update:model-value=\"props.updateCurrentValue(!$event)\"\n                />\n            </template>\n        </swag-paypal-setting>\n    </template>\n\n    <template #headerRight>\n        <sw-button-process\n            :process-success=\"testCredentials === 'success'\"\n            :is-loading=\"testCredentials === 'loading'\"\n            size=\"small\"\n            @update:process-success=\"testCredentials = 'none'\"\n            @click=\"onTest('')\"\n        >\n            {{ $t('swag-paypal-settings.credentialsLive.test') }}\n        </sw-button-process>\n    </template>\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.clientId\"\n        :disabled=\"settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.clientSecret\"\n        :disabled=\"settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.merchantPayerId\"\n        :disabled=\"settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n</mt-card>\n{% endblock %}\n\n{% block swag_paypal_settings_sandbox_credentials %}\n<mt-card\n    class=\"swag-paypal-settings-sandbox-credentials\"\n    position-identifier=\"swag-paypal-sandbox-credentials\"\n    :is-loading=\"settingsStore.isLoading\"\n>\n    <template #title>\n        <swag-paypal-setting\n            class=\"swag-paypal-settings-credentials__title\"\n            path=\"SwagPayPal.settings.sandbox\"\n            :label=\"$t('swag-paypal-settings.credentialsSandbox.title')\"\n            :help-text=\"null\"\n            :bordered=\"false\"\n        />\n    </template>\n\n    <template #headerRight>\n        <sw-button-process\n            :process-success=\"testCredentialsSandbox === 'success'\"\n            :is-loading=\"testCredentialsSandbox === 'loading'\"\n            size=\"small\"\n            @update:process-success=\"testCredentialsSandbox = 'none'\"\n            @click=\"onTest('Sandbox')\"\n        >\n            {{ $t('swag-paypal-settings.credentialsSandbox.test') }}\n        </sw-button-process>\n    </template>\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.clientIdSandbox\"\n        :disabled=\"!settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.clientSecretSandbox\"\n        :disabled=\"!settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.merchantPayerIdSandbox\"\n        :disabled=\"!settingsStore.isSandbox && !settingsStore.salesChannel\"\n    />\n</mt-card>\n{% endblock %}\n\n<mt-card\n    class=\"swag-paypal-settings-behavior\"\n    position-identifier=\"swag-paypal-settings-behavior\"\n    :title=\"$t('swag-paypal-settings.behavior.title')\"\n    :is-loading=\"settingsStore.isLoading\"\n>\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.intent\"\n        :options=\"intentOptions\"\n    />\n\n    <swag-paypal-setting path=\"SwagPayPal.settings.submitCart\" />\n\n    <swag-paypal-setting path=\"SwagPayPal.settings.brandName\" />\n\n    <swag-paypal-setting\n        path=\"SwagPayPal.settings.landingPage\"\n        :options=\"landingPageOptions\"\n    />\n\n    <swag-paypal-setting path=\"SwagPayPal.settings.sendOrderNumber\" />\n\n    <sw-container columns=\"1fr 1fr\" gap=\"0px 30px\">\n        <swag-paypal-setting path=\"SwagPayPal.settings.orderNumberPrefix\" />\n        <swag-paypal-setting path=\"SwagPayPal.settings.orderNumberSuffix\" />\n    </sw-container>\n\n    <swag-paypal-setting path=\"SwagPayPal.settings.excludedProductIds\">\n        <template #content=\"props\">\n            <sw-entity-multi-id-select\n                name=\"SwagPayPal.settings.excludedProductIds\"\n                :repository=\"productRepository\"\n                :criteria=\"excludedProductCriteria\"\n                :map-inheritance=\"props\"\n                :disabled=\"props.disabled\"\n                :value=\"props.currentValue\"\n                @update:value=\"props.updateCurrentValue\"\n            >\n                <template #selection-label-property=\"{ item }\">\n                    <sw-product-variant-info\n                        :variations=\"item.variation\"\n                    >\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n\n                <template #result-label-property=\"{ item }\">\n                    <sw-product-variant-info\n                        :variations=\"item.variation\"\n                    >\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n\n            </sw-entity-multi-id-select>\n        </template>\n    </swag-paypal-setting>\n\n    <swag-paypal-setting path=\"SwagPayPal.settings.excludedProductStreamIds\">\n        <template #content=\"props\">\n            <sw-entity-multi-id-select\n                name=\"SwagPayPal.settings.excludedProductStreamIds\"\n                :repository=\"productStreamRepository\"\n                :map-inheritance=\"props\"\n                :disabled=\"props.disabled\"\n                :value=\"props.currentValue\"\n                @update:value=\"props.updateCurrentValue\"\n            />\n        </template>\n    </swag-paypal-setting>\n</mt-card>\n\n<mt-card\n    class=\"swag-paypal-settings-vaulting\"\n    position-identifier=\"swag-paypal-settings-vaulting\"\n    :title=\"$t('swag-paypal-settings.vaulting.title')\"\n    :is-loading=\"merchantInformationStore.isLoading || settingsStore.isLoading\"\n>\n    <div class=\"swag-paypal-settings-vaulting__description-title\">\n        {{ $t('swag-paypal-settings.vaulting.descriptionTitle') }}\n    </div>\n\n    <div class=\"swag-paypal-settings-vaulting__description-text\">\n        {{ $t('swag-paypal-settings.vaulting.descriptionText') }}\n    </div>\n\n    <template v-if=\"!merchantInformationStore.isLoading\">\n        <swag-paypal-setting\n            v-if=\"merchantInformationStore.canVault\"\n            path=\"SwagPayPal.settings.vaultingEnabledWallet\"\n        />\n\n        <swag-paypal-setting\n            v-if=\"merchantInformationStore.canVault\"\n            path=\"SwagPayPal.settings.vaultingEnabledACDC\"\n        />\n\n        <swag-paypal-setting\n            v-if=\"merchantInformationStore.canVault\"\n            path=\"SwagPayPal.settings.vaultingEnabledVenmo\"\n        />\n\n        <div v-if=\"!merchantInformationStore.canVault\">\n            <swag-paypal-onboarding-button\n                class=\"swag-paypal-settings-vaulting__activate-button\"\n                :mode=\"settingsStore.isSandbox ? 'sandbox' : 'live'\"\n            >\n                {{ $t('swag-paypal-settings.vaulting.activeButtonLabel') }}\n            </swag-paypal-onboarding-button>\n        </div>\n    </template>\n</mt-card>\n\n<mt-card\n    class=\"swag-paypal-settings-acdc\"\n    position-identifier=\"swag-paypal-settings-acdc\"\n    :title=\"$t('swag-paypal-settings.acdc.title')\"\n    :is-loading=\"settingsStore.isLoading\"\n>\n    <swag-paypal-setting path=\"SwagPayPal.settings.acdcForce3DS\" />\n</mt-card>\n\n<mt-card\n    class=\"swag-paypal-settings-pui\"\n    position-identifier=\"swag-paypal-settings-pui\"\n    :title=\"$t('swag-paypal-settings.pui.title')\"\n    :is-loading=\"settingsStore.isLoading\"\n>\n    <swag-paypal-setting path=\"SwagPayPal.settings.puiCustomerServiceInstructions\" />\n</mt-card>\n","import type * as PayPal from 'SwagPayPal/types';\nimport template from './swag-paypal-settings-general.html.twig';\nimport './swag-paypal-settings-general.scss';\nimport { INTENTS, LANDING_PAGES } from 'SwagPayPal/constant/swag-paypal-settings.constant';\n\nconst { Criteria } = Shopware.Data;\n\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'SwagPayPalSettingsService',\n    ],\n\n    mixins: [\n        Shopware.Mixin.getByName('swag-paypal-notification'),\n    ],\n\n    data(): {\n        testCredentials: 'none' | 'loading' | 'success';\n        testCredentialsSandbox: 'none' | 'loading' | 'success';\n    } {\n        return {\n            testCredentials: 'none',\n            testCredentialsSandbox: 'none',\n        };\n    },\n\n    computed: {\n        settingsStore() {\n            return Shopware.Store.get('swagPayPalSettings');\n        },\n\n        merchantInformationStore() {\n            return Shopware.Store.get('swagPayPalMerchantInformation');\n        },\n\n        intentOptions() {\n            return INTENTS.map((intent) => ({\n                value: intent,\n                label: this.$t(`swag-paypal-settings.options.intent.${intent}`),\n            }));\n        },\n\n        landingPageOptions() {\n            return LANDING_PAGES.map((landingPage) => ({\n                value: landingPage,\n                label: this.$t(`swag-paypal-settings.options.landingPage.${landingPage}`),\n            }));\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productStreamRepository() {\n            return this.repositoryFactory.create('product_stream');\n        },\n\n        excludedProductCriteria() {\n            return (new Criteria(1, 25)).addAssociation('options.group');\n        },\n    },\n\n    methods: {\n        async onTest(prefix: 'Sandbox' | '') {\n            this[`testCredentials${prefix}`] = 'loading';\n\n            const response = await this.SwagPayPalSettingsService.testApiCredentials(\n                this.settingsStore.get(`SwagPayPal.settings.clientId${prefix}`),\n                this.settingsStore.get(`SwagPayPal.settings.clientSecret${prefix}`),\n                this.settingsStore.get(`SwagPayPal.settings.merchantPayerId${prefix}`),\n                prefix === 'Sandbox',\n            ).catch((error: PayPal.ServiceError) => error.response?.data ?? { errors: [] });\n\n            if (response.valid) {\n                this.createNotificationSuccess({\n                    title: this.$t('swag-paypal.notifications.test.title'),\n                    message: this.$t('swag-paypal.notifications.test.successMessage'),\n                });\n            } else if (response.errors) {\n                this.createNotificationError({\n                    title: this.$t('swag-paypal.notifications.test.title'),\n                    message: this.$t('swag-paypal.notifications.test.errorMessage', {\n                        message: this.createMessageFromError(response),\n                    }),\n                });\n            }\n\n            this[`testCredentials${prefix}`] = response.valid ? 'success' : 'none';\n        },\n    },\n});\n"],"names":["template","Criteria","index","INTENTS","intent","LANDING_PAGES","landingPage","prefix","response","error","_a"],"mappings":"uEAAA,MAAAA,EAAe,mmMCKT,CAAE,SAAAC,CAAA,EAAa,SAAS,KAE9BC,EAAe,SAAS,UAAU,oBAAoB,CAClD,SAAAF,EAEA,OAAQ,CACJ,MACA,oBACA,2BAAA,EAGJ,OAAQ,CACJ,SAAS,MAAM,UAAU,0BAA0B,CAAA,EAGvD,MAGE,CACE,MAAO,CACH,gBAAiB,OACjB,uBAAwB,MAAA,CAC5B,EAGJ,SAAU,CACN,eAAgB,CACZ,OAAO,SAAS,MAAM,IAAI,oBAAoB,CAAA,EAGlD,0BAA2B,CACvB,OAAO,SAAS,MAAM,IAAI,+BAA+B,CAAA,EAG7D,eAAgB,CACZ,OAAOG,EAAQ,IAAKC,IAAY,CAC5B,MAAOA,EACP,MAAO,KAAK,GAAG,uCAAuCA,CAAM,EAAE,CAAA,EAChE,CAAA,EAGN,oBAAqB,CACjB,OAAOC,EAAc,IAAKC,IAAiB,CACvC,MAAOA,EACP,MAAO,KAAK,GAAG,4CAA4CA,CAAW,EAAE,CAAA,EAC1E,CAAA,EAGN,mBAAoB,CAChB,OAAO,KAAK,kBAAkB,OAAO,SAAS,CAAA,EAGlD,yBAA0B,CACtB,OAAO,KAAK,kBAAkB,OAAO,gBAAgB,CAAA,EAGzD,yBAA0B,CACtB,OAAQ,IAAIL,EAAS,EAAG,EAAE,EAAG,eAAe,eAAe,CAAA,CAC/D,EAGJ,QAAS,CACL,MAAM,OAAOM,EAAwB,CACjC,KAAK,kBAAkBA,CAAM,EAAE,EAAI,UAEnC,MAAMC,EAAW,MAAM,KAAK,0BAA0B,mBAClD,KAAK,cAAc,IAAI,+BAA+BD,CAAM,EAAE,EAC9D,KAAK,cAAc,IAAI,mCAAmCA,CAAM,EAAE,EAClE,KAAK,cAAc,IAAI,sCAAsCA,CAAM,EAAE,EACrEA,IAAW,SAAA,EACb,MAAOE,UAA+B,QAAAC,EAAAD,EAAM,WAAN,YAAAC,EAAgB,OAAQ,CAAE,OAAQ,CAAA,GAAI,EAE1EF,EAAS,MACT,KAAK,0BAA0B,CAC3B,MAAO,KAAK,GAAG,sCAAsC,EACrD,QAAS,KAAK,GAAG,+CAA+C,CAAA,CACnE,EACMA,EAAS,QAChB,KAAK,wBAAwB,CACzB,MAAO,KAAK,GAAG,sCAAsC,EACrD,QAAS,KAAK,GAAG,8CAA+C,CAC5D,QAAS,KAAK,uBAAuBA,CAAQ,CAAA,CAChD,CAAA,CACJ,EAGL,KAAK,kBAAkBD,CAAM,EAAE,EAAIC,EAAS,MAAQ,UAAY,MAAA,CACpE,CAER,CAAC"}