const d="global.default.error",l={2:"messageUnsupportedGrantType",3:"messageInvalidRequest",4:"messageInvalidClient",5:"messageInvalidScope",6:"messageInvalidCredentials",7:"messageServerError",8:"messageInvalidRefreshToken",9:"messageAccessDenied",10:"messageInvalidCredentials"};function g(e,i="sw-login.index."){return{message:l[e]?`${i}${l[e]}`:"",title:d}}const c=`{% block sw_login_login %} <form class="sw-login-login" @submit.prevent="loginUserWithPassword" > {% block sw_login_login_form_headline %} <h2 class="sw-login__content-headline"> {{ $tc('sw-login.index.headlineForm') }} </h2> {% endblock %} {% block sw_login_login_alert %} <mt-banner v-if="showLoginAlert" variant="info" :show-icon="true" :closable="false" > {{ loginAlertMessage }} </mt-banner> {% endblock %} {% block sw_login_login_user_field %} <mt-text-field v-model="username" v-autofocus name="sw-field--username" :label="$tc('sw-login.index.labelUsername')" :placeholder="$tc('sw-login.index.placeholderUsername')" :disabled="showLoginAlert" required /> {% endblock %} {% block sw_login_login_password_field %} <mt-password-field v-model="password" name="sw-field--password" :label="$tc('sw-login.index.labelPassword')" :placeholder="$tc('sw-login.index.placeholderPassword')" :disabled="showLoginAlert" required /> {% endblock %} <mt-checkbox v-model:checked="rememberMe" :label="$tc('sw-login.index.labelKeepLoggedIn')" /> {% block sw_login_login_submit %} <div class="sw-login__submit"> {% block sw_login_login_forgot_password %} <router-link :to="{ name: 'sw.login.index.recovery' }" class="sw-login__forgot-password-action" > {{ $tc('sw-login.index.forgottenPasswordLink') }} </router-link> {% endblock %} {% block sw_login_login_submit_button %} <mt-button :disabled="password.length <= 0 || username.length <= 0 || showLoginAlert" class="sw-login__login-action" variant="primary" type="submit" > {{ $tc('sw-login.index.buttonLogin') }} </mt-button> {% endblock %} </div> {% endblock %} </form> {% endblock %}`,{Component:m,Mixin:h}=Shopware,u=m.wrapComponentConfig({template:c,inject:["loginService","userService","licenseViolationService"],emits:["is-loading","is-not-loading","login-success","login-error"],mixins:[h.getByName("notification")],data(){return{username:"",password:"",rememberMe:!1,loginAlertMessage:""}},computed:{showLoginAlert(){return typeof this.loginAlertMessage=="string"&&this.loginAlertMessage.length>=1}},created(){localStorage.getItem("sw-admin-locale")||Shopware.Store.get("session").setAdminLocale(navigator.language)},methods:{loginUserWithPassword(){return this.$emit("is-loading"),this.loginService.setRememberMe(this.rememberMe),this.loginService.loginByUsername(this.username,this.password).then(()=>{this.handleLoginSuccess(),this.$emit("is-not-loading")}).catch(e=>{this.password="",this.handleLoginError(e),this.$emit("is-not-loading")})},handleLoginSuccess(){this.password="",this.$emit("login-success");const e=new Promise(i=>{setTimeout(i,150)});return this.licenseViolationService&&this.licenseViolationService.removeTimeFromLocalStorage(this.licenseViolationService.key.showViolationsKey),e.then(()=>{this.$parent.isLoginSuccess=!1,this.forwardLogin(),sessionStorage.getItem("sw-login-should-reload")&&(sessionStorage.removeItem("sw-login-should-reload"),window.location.reload(!0))})},forwardLogin(){var s,o,t,n;const e=JSON.parse(sessionStorage.getItem("sw-admin-previous-route"));if(sessionStorage.removeItem("sw-admin-previous-route"),Shopware.Context.app.firstRunWizard&&!((n=(t=(o=(s=this.$router)==null?void 0:s.currentRoute)==null?void 0:o.value)==null?void 0:t.name)!=null&&n.startsWith("sw.first.run.wizard"))&&this.$router.hasRoute("sw.first.run.wizard.index")){this.$router.push({name:"sw.first.run.wizard.index"});return}if(e!=null&&e.fullPath){this.$router.push(e.fullPath);return}this.$router.push({name:"core"})},handleLoginError(e){this.password="",this.$emit("login-error"),setTimeout(()=>{this.$emit("login-error")},500),this.createNotificationFromResponse(e)},createNotificationFromResponse(e){var o,t,n;if(!e.response){this.createNotificationError({message:this.$tc("sw-login.index.messageGeneralRequestError")});return}const i=e.config.url;let s=e.response.data.errors;if(s=Array.isArray(s)?s[0]:s,parseInt(s.status,10)===429){const r=(t=(o=s==null?void 0:s.meta)==null?void 0:o.parameters)==null?void 0:t.seconds;this.loginAlertMessage=this.$tc("sw-login.index.messageAuthThrottled",{seconds:r},0),setTimeout(()=>{this.loginAlertMessage=""},r*1e3);return}if((n=s.code)!=null&&n.length){const{message:r,title:a}=g(parseInt(s.code,10));this.createNotificationError({title:this.$tc(a),message:this.$tc(r,0,{url:i})})}}}});export{u as default};
