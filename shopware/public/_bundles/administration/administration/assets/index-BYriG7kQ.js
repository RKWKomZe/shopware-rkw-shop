const i=`<div class="sw-product-measurement-form"> <div class="sw-product-measurement-form__description-group"> <i18n-t tag="p" keypath="sw-product.measurementForm.description" scope="local" > <template #link> <sw-internal-link :router-link="{ name: 'sw.sales.channel.list' }" hide-icon inline > {{ $tc('sw-product.measurementForm.linkText') }} </sw-internal-link> </template> </i18n-t> </div> <sw-container columns="1fr 1fr" gap="0 32px" > <sw-inherit-wrapper v-model:value="product.width" :has-parent="!!parentProduct.id" :inherited-value="parentProduct.width" > <template #content="props"> <mt-unit-field measurement-type="length" :model-value="props.currentValue" :default-unit="lengthUnit" :label="$t('sw-product.settingsForm.labelWidth')" :is-inheritance-field="props.isInheritField" :is-inherited="props.isInherited" :placeholder="$t('sw-product.settingsForm.placeholderWidth')" :min="0" :step="1" :error="productWidthError" :disabled="props.isInherited || !allowEdit" @update:model-value="props.updateCurrentValue" @update:default-unit="onUpdateLengthUnit($event, 'width')" @inheritance-restore="props.restoreInheritance" @inheritance-remove="props.removeInheritance" /> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="product.height" :has-parent="!!parentProduct.id" :inherited-value="parentProduct.height" > <template #content="props"> <mt-unit-field measurement-type="length" :model-value="props.currentValue" :default-unit="lengthUnit" :label="$t('sw-product.settingsForm.labelHeight')" :is-inheritance-field="props.isInheritField" :is-inherited="props.isInherited" :placeholder="$t('sw-product.settingsForm.placeholderHeight')" :min="0" :step="1" :error="productHeightError" :disabled="props.isInherited || !allowEdit" @update:model-value="props.updateCurrentValue" @update:default-unit="onUpdateLengthUnit($event, 'height')" @inheritance-restore="props.restoreInheritance" @inheritance-remove="props.removeInheritance" /> </template> </sw-inherit-wrapper> </sw-container> <sw-container columns="1fr 1fr" gap="0 32px" > <sw-inherit-wrapper v-model:value="product.length" :has-parent="!!parentProduct.id" :inherited-value="parentProduct.length" > <template #content="props"> <mt-unit-field measurement-type="length" :model-value="props.currentValue" :default-unit="lengthUnit" :label="$t('sw-product.settingsForm.labelLength')" :is-inheritance-field="props.isInheritField" :is-inherited="props.isInherited" :placeholder="$t('sw-product.settingsForm.placeholderLength')" :min="0" :step="1" :error="productLengthError" :disabled="props.isInherited || !allowEdit" @update:model-value="props.updateCurrentValue" @update:default-unit="onUpdateLengthUnit($event, 'length')" @inheritance-restore="props.restoreInheritance" @inheritance-remove="props.removeInheritance" /> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="product.weight" :has-parent="!!parentProduct.id" :inherited-value="parentProduct.weight" > <template #content="props"> <mt-unit-field measurement-type="mass" :model-value="props.currentValue" :default-unit="weightUnit" :label="$t('sw-product.settingsForm.labelWeight')" :is-inheritance-field="props.isInheritField" :is-inherited="props.isInherited" :placeholder="$t('sw-product.settingsForm.placeholderWeight')" :min="0" :step="1" :error="productWeightError" :disabled="props.isInherited || !allowEdit" @update:model-value="props.updateCurrentValue" @update:default-unit="onUpdateWeightUnit" @inheritance-restore="props.restoreInheritance" @inheritance-remove="props.removeInheritance" /> </template> </sw-inherit-wrapper> </sw-container> </div>`,{Mixin:n,Utils:r}=Shopware,{mapPropertyErrors:o}=Shopware.Component.getComponentHelper(),p={template:i,mixins:[n.getByName("placeholder")],props:{allowEdit:{type:Boolean,required:!0}},computed:{product(){return Shopware.Store.get("swProductDetail").product},parentProduct(){return Shopware.Store.get("swProductDetail").parentProduct},lengthUnit(){return Shopware.Store.get("swProductDetail").lengthUnit},weightUnit(){return Shopware.Store.get("swProductDetail").weightUnit},...o("product",["width","height","length","weight"])},methods:{onUpdateLengthUnit(e,t){t==="width"&&(this.convertHeight(e),this.convertLength(e)),t==="height"&&(this.convertWidth(e),this.convertLength(e)),t==="length"&&(this.convertWidth(e),this.convertHeight(e)),Shopware.Store.get("swProductDetail").setLengthUnit(e)},convertWidth(e){this.product.width&&(this.product.width=r.unitConversion.convert(this.product.width,this.lengthUnit,e))},convertHeight(e){this.product.height&&(this.product.height=r.unitConversion.convert(this.product.height,this.lengthUnit,e))},convertLength(e){this.product.length&&(this.product.length=r.unitConversion.convert(this.product.length,this.lengthUnit,e))},onUpdateWeightUnit(e){Shopware.Store.get("swProductDetail").setWeightUnit(e)}}};export{p as default};
