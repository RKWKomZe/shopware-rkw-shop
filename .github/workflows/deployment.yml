name: Deployment Shopware 6

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'staging'

env:
  ENVIRONMENT: 'prod'
  NODE_VERSION: '24'
  PHP_VERSION: '8.3'

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.set_release_name.outputs.release_name }}
    environment: production
    defaults:
      run:
        working-directory: shopware
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set release name (ISO 8601)
        id: set_release_name
        run: echo "release_name=$(date -u +'%Y-%m-%dT%H-%M-%SZ')" >> $GITHUB_OUTPUT

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, zip, gd, curl, sodium, opcache
          coverage: none

      - name: Require Deployment Helper
        run: composer require shopware/deployment-helper --no-interaction --no-progress

      - name: Install Composer dependencies (prod)
        run: composer install --no-dev --no-interaction --optimize-autoloader --prefer-dist --no-scripts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build assets without DB (CI mode)
        run: |
          export APP_ENV=prod
          export CI=1
          export INSTALL=1
          export DATABASE_URL="mysql://user:pass@127.0.0.1:3306/dummy?charset=utf8mb4"
          export MAILER_DSN="null://null"
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

          php bin/ci bundle:dump
          SHOPWARE_SKIP_THEME_COMPILE=true ./bin/build-storefront.sh
          ./bin/build-administration.sh
          CI=1 php bin/ci assets:install --no-interaction

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            shopware/vendor/
            shopware/public/bundles/
            shopware/public/theme/
            shopware/composer.lock

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Replace placeholders in config
        run: |
          config_file="shopware/.env.${ENVIRONMENT}"
          sed -i "s|___APP_SECRET___|${{ secrets.APP_SECRET }}|g" $config_file || true
          sed -i "s|___INSTANCE_ID___|${{ secrets.INSTANCE_ID }}|g" $config_file || true
          sed -i "s|___DEPLOY_PATH___|${{ vars.DEPLOY_PATH }}|g" $config_file || true
          sed -i "s|___DB_HOST___|${{ vars.DB_HOST }}|g" $config_file || true
          sed -i "s|___DB_NAME___|${{ vars.DB_NAME }}|g" $config_file || true
          sed -i "s|___DB_USER___|${{ vars.DB_USER }}|g" $config_file || true
          sed -i "s|___DB_PASSWORD___|${{ secrets.DB_PASSWORD }}|g" $config_file || true
          sed -i "s|___SMTP_USER___|${{ vars.SMTP_USER }}|g" $config_file || true
          sed -i "s|___SMTP_HOST___|${{ vars.SMTP_HOST }}|g" $config_file || true
          sed -i "s|___SMTP_PASSWORD___|${{ secrets.SMTP_PASSWORD }}|g" $config_file || true

      - name: Setup SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create release directory on server
        run: ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "mkdir -p ${{ vars.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release_name }}"

      - name: Rsync code to release (exclude env files)
        run: |
          rsync -az --delete \
            --exclude-from=$GITHUB_WORKSPACE/.deploy-exclude \
            ./ \
            ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:${{ vars.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release_name }}/

      - name: Create shared symlinks and create missing folders
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "
            set -e
            release_dir='${{ vars.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release_name }}'
            shared_dir='${{ vars.DEPLOY_PATH }}/shared'
            deploy_file=\"\$release_dir/.deploy-shared\"

            if [[ ! -f \"\$deploy_file\" ]]; then
              echo 'No .deploy-shared file found. Skipping symlinks.'
              exit 0
            fi

            while IFS=',' read -r source target; do
              source=\$(echo \"\$source\" | xargs)
              target=\$(echo \"\$target\" | xargs)

              target_path=\"\$release_dir/\$target\"
              source_path=\"\$shared_dir/\$source\"

              mkdir -p \"\$source_path\"
              mkdir -p \$(dirname \"\$target_path\")
              ln -sfn \"\$source_path\" \"\$target_path\"
            done < \"\$deploy_file\"
          "

      - name: Update current symlink
        run: ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "ln -sfn ${{ vars.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release_name }} ${{ vars.DEPLOY_PATH }}/current"


  finalize:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Setup SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Run Deployment Helper
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "
            cd ${{ vars.DEPLOY_PATH }}/current && \
            ${{ vars.PHP_BINARY }} vendor/bin /shopware-deployment-helper run
          "
